{
  "name": "aida-platform-backend",
  "main": "src/index.ts",
  "compatibility_date": "2024-07-01",
  "node_compat": true,
  "minify": true,
  
  // Environment configuration
  "env": {
    "development": {
      "vars": {
        "ENVIRONMENT": "development",
        "LOG_LEVEL": "debug"
      }
    },
    "staging": {
      "vars": {
        "ENVIRONMENT": "staging",
        "LOG_LEVEL": "info"
      }
    },
    "production": {
      "vars": {
        "ENVIRONMENT": "production",
        "LOG_LEVEL": "error"
      }
    }
  },

  // Durable Objects for conversation state management
  "durable_objects": {
    "bindings": [
      {
        "name": "CONVERSATION_MANAGER",
        "class_name": "ConversationManager",
        "script_name": "aida-platform-backend"
      },
      {
        "name": "ASSISTANT_PROCESSOR", 
        "class_name": "AssistantProcessor",
        "script_name": "aida-platform-backend"
      }
    ]
  },

  // KV storage for caching and session management
  "kv_namespaces": [
    {
      "binding": "CACHE_STORE",
      "id": "aida-cache-namespace",
      "preview_id": "aida-cache-namespace-preview"
    },
    {
      "binding": "SESSION_STORE",
      "id": "aida-session-namespace", 
      "preview_id": "aida-session-namespace-preview"
    },
    {
      "binding": "RATE_LIMIT_STORE",
      "id": "aida-rate-limit-namespace",
      "preview_id": "aida-rate-limit-namespace-preview"
    }
  ],

  // AI model bindings for Cloudflare AI
  "ai": {
    "binding": "AI"
  },

  // Analytics engine for usage tracking
  "analytics_engine_datasets": [
    {
      "binding": "ANALYTICS",
      "dataset": "aida_platform_analytics"
    }
  ],

  // Queue bindings for async processing
  "queues": {
    "producers": [
      {
        "binding": "EMBEDDING_QUEUE",
        "queue": "aida-embedding-processing"
      },
      {
        "binding": "MESSAGE_QUEUE",
        "queue": "aida-message-processing"
      },
      {
        "binding": "WEBHOOK_QUEUE",
        "queue": "aida-webhook-processing"
      }
    ],
    "consumers": [
      {
        "queue": "aida-embedding-processing",
        "max_batch_size": 10,
        "max_batch_timeout": 5
      },
      {
        "queue": "aida-message-processing",
        "max_batch_size": 5,
        "max_batch_timeout": 1
      },
      {
        "queue": "aida-webhook-processing",
        "max_batch_size": 20,
        "max_batch_timeout": 3
      }
    ]
  },

  // Service bindings for microservices architecture
  "services": [
    {
      "binding": "EVOLUTION_API_SERVICE",
      "service": "evolution-api-proxy"
    },
    {
      "binding": "NOTIFICATION_SERVICE", 
      "service": "notification-sender"
    }
  ],

  // Browser rendering for QR code generation
  "browser": {
    "binding": "BROWSER"
  },

  // D1 database binding (if using Cloudflare D1 instead of Supabase)
  "d1_databases": [
    {
      "binding": "DB",
      "database_name": "aida-platform-db",
      "database_id": "aida-platform-db-id"
    }
  ],

  // R2 storage for media files
  "r2_buckets": [
    {
      "binding": "MEDIA_STORAGE",
      "bucket_name": "aida-platform-media"
    },
    {
      "binding": "BACKUP_STORAGE",
      "bucket_name": "aida-platform-backups"
    }
  ],

  // Vectorize binding for vector search (alternative to pgvector)
  "vectorize": [
    {
      "binding": "VECTORIZE_INDEX",
      "index_name": "aida-conversation-embeddings"
    }
  ],

  // Hyperdrive for database connection pooling
  "hyperdrive": [
    {
      "binding": "HYPERDRIVE",
      "id": "aida-hyperdrive-config"
    }
  ],

  // Worker limits and configuration
  "limits": {
    "cpu_ms": 30000
  },

  // Cron triggers for scheduled tasks
  "triggers": {
    "crons": [
      {
        "cron": "0 */6 * * *",
        "name": "cleanup-old-conversations"
      },
      {
        "cron": "0 0 * * *",
        "name": "generate-daily-analytics"
      },
      {
        "cron": "*/5 * * * *", 
        "name": "health-check-evolution-api"
      },
      {
        "cron": "0 */12 * * *",
        "name": "optimize-vector-indexes"
      }
    ]
  },

  // Development configuration
  "dev": {
    "ip": "localhost",
    "port": 8787,
    "local_protocol": "http"
  },

  // Build configuration
  "build": {
    "command": "npm run build",
    "cwd": "./",
    "watch_dir": "./src"
  },

  // Route configuration for custom domains
  "routes": [
    {
      "pattern": "api.aida-platform.com/*",
      "zone_name": "aida-platform.com"
    }
  ],

  // Observability configuration
  "observability": {
    "enabled": true
  },

  // Tail workers for logging
  "tail_consumers": [
    {
      "service": "aida-log-processor"
    }
  ],

  // Placement configuration for performance
  "placement": {
    "mode": "smart"
  },

  // Logpush configuration for enterprise logging
  "logpush": true,

  // Upload configuration
  "upload": {
    "format": "service-worker",
    "dir": "./dist",
    "main": "./index.js"
  },

  // Metadata for deployment tracking
  "define": {
    "BUILD_VERSION": "1.0.0",
    "BUILD_TIME": "2024-01-01T00:00:00Z"
  },

  // Security headers
  "rules": [
    {
      "type": "Header",
      "src": "/*",
      "headers": {
        "X-Frame-Options": "DENY",
        "X-Content-Type-Options": "nosniff",
        "Referrer-Policy": "strict-origin-when-cross-origin",
        "Permissions-Policy": "camera=(), microphone=(), geolocation=()"
      }
    }
  ],

  // Worker compatibility flags
  "compatibility_flags": [
    "nodejs_compat",
    "streams_enable_constructors"
  ]
}