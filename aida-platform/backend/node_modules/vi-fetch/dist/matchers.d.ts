import { F as FetchSpyInstance } from './api-f2735cfd.js';
import 'tinyspy';
import './headers.js';
import './appeanable.js';
import './response.js';

interface JestUtils {
    isNot: boolean;
    equals: (a: any, b: any, matchers?: any[], strict?: boolean) => boolean;
    utils: {
        matcherHint(matcher: string, actual: string, recieved: string): string;
        EXPECTED_COLOR(text: string): string;
        RECEIVED_COLOR(text: string): string;
        printReceived(obj: any): string;
        printExpected(obj: any): string;
    };
}
declare function toFetch(this: JestUtils, actual: FetchSpyInstance, response?: unknown): {
    pass: boolean;
    message: () => string;
};
declare function toFetchNthTime(this: JestUtils, actual: FetchSpyInstance, time: number, response: unknown): {
    pass: boolean;
    actual: unknown;
    expected: unknown;
    message: () => string;
};
declare function toFetchTimes(this: JestUtils, actual: FetchSpyInstance, times: number): {
    pass: boolean;
    message: () => string;
};
declare function toFetchWithBody(this: JestUtils, actual: FetchSpyInstance, expectedBody: any): {
    pass: boolean;
    message: () => string;
};
declare function toFetchNthTimeWithBody(this: JestUtils, actual: FetchSpyInstance, time: number, expectedBody: any): {
    pass: boolean;
    message: () => string;
};
declare function toFetchWithQuery(this: JestUtils, actual: FetchSpyInstance, expectedQuery: string | Record<string, any> | URLSearchParams): {
    pass: boolean;
    message: () => string;
};
declare function toFetchNthTimeWithQuery(this: JestUtils, actual: FetchSpyInstance, time: number, expectedQuery: string | Record<string, any> | URLSearchParams): {
    pass: boolean;
    message: () => string;
};

export { toFetch, toFetchNthTime, toFetchNthTimeWithBody, toFetchNthTimeWithQuery, toFetchTimes, toFetchWithBody, toFetchWithQuery };
