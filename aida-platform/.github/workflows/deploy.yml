name: Deploy AIDA Platform

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '20'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json
            
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Type check backend
        working-directory: ./backend
        run: npm run type-check
        
      - name: Type check frontend
        working-directory: ./frontend
        run: npm run type-check
        
      - name: Lint backend
        working-directory: ./backend
        run: npm run lint
        
      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint
        
      - name: Run backend tests
        working-directory: ./backend
        run: npm run test:run
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test
        
      - name: Security audit
        working-directory: ./backend
        run: npm audit --audit-level=high
        
  deploy-backend:
    name: Deploy Backend
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Deploy to Cloudflare Workers
        working-directory: ./backend
        run: npx wrangler deploy --env ${{ steps.set-env.outputs.environment }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Set secrets
        working-directory: ./backend
        run: |
          echo "${{ secrets.OPENAI_API_KEY }}" | npx wrangler secret put OPENAI_API_KEY --env ${{ steps.set-env.outputs.environment }}
          echo "${{ secrets.ANTHROPIC_API_KEY }}" | npx wrangler secret put ANTHROPIC_API_KEY --env ${{ steps.set-env.outputs.environment }}
          echo "${{ secrets.EVOLUTION_API_KEY }}" | npx wrangler secret put EVOLUTION_API_KEY --env ${{ steps.set-env.outputs.environment }}
          echo "${{ secrets.SUPABASE_URL }}" | npx wrangler secret put SUPABASE_URL --env ${{ steps.set-env.outputs.environment }}
          echo "${{ secrets.SUPABASE_ANON_KEY }}" | npx wrangler secret put SUPABASE_ANON_KEY --env ${{ steps.set-env.outputs.environment }}
          echo "${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" | npx wrangler secret put SUPABASE_SERVICE_ROLE_KEY --env ${{ steps.set-env.outputs.environment }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          
  deploy-frontend:
    name: Deploy Frontend
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Set environment variables
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "NEXT_PUBLIC_API_URL=https://aida-platform-backend-prod.your-domain.workers.dev" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "NEXT_PUBLIC_API_URL=https://aida-platform-backend-staging.your-domain.workers.dev" >> $GITHUB_ENV
            echo "NEXT_PUBLIC_ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
          
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Deploy to Cloudflare Pages
        working-directory: ./frontend
        run: npx wrangler pages deploy out --project-name aida-platform-frontend
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          
  health-check:
    name: Health Check
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Set API URL
        id: set-url
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "api_url=https://aida-platform-backend-prod.your-domain.workers.dev" >> $GITHUB_OUTPUT
          else
            echo "api_url=https://aida-platform-backend-staging.your-domain.workers.dev" >> $GITHUB_OUTPUT
          fi
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.set-url.outputs.api_url }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status $response"
            exit 1
          fi
          
      - name: API endpoints check
        run: |
          endpoints=("/health" "/api/stats")
          for endpoint in "${endpoints[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.set-url.outputs.api_url }}$endpoint)
            if [ $response -eq 200 ] || [ $response -eq 401 ]; then
              echo "✅ $endpoint is responding"
            else
              echo "❌ $endpoint failed with status $response"
              exit 1
            fi
          done